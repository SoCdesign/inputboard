
If you build the project for the first time, plug in your sd card first and determine the device name with lsblk, e.g. /dev/sdb

Important! It must be a device specifier (/dev/sd[a-z]), not a partition (e.g. /dev/sdb1)


Make sure that you are in the inputboard directory.
Then you execute 

$ chmod -R +x ./sbin/
$ ./sbin/generate_all <device_name>

(e.g. ./sbin/generate_all /dev/sdb)

This will generate the bitstream and create all other needed files.
It takes ~1 hour if you run it for the first time.
In the end, it will ask you to confirm the sd card device.
It will ask you to initialize the sd card first, if the sd card image was not generated by the script.
Initializing the sd card will create partitions and the linaro fs.
In the very end it will copy the files.


To remove all generated files, run
./sbin/clean_all

To only copy the files from sd_card_files directory to the sd card, run
./sbin/sd_card_create sd_card_files <device>

---------------------------------
Modifing VHDL in the superip core
---------------------------------

Start the project with

xps ZedBoard_Linux_Design/hw/xps_proj/system.xmp &


Make sure the clk parameters in system.mhs are set as follows:
...
PARAMETER C_FCLK_CLK0_FREQ = 100000000
PARAMETER C_FCLK_CLK1_FREQ = 166666672
PARAMETER C_FCLK_CLK2_FREQ = 200000000
PARAMETER C_FCLK_CLK3_FREQ = 50000000
...


If you changed the VHDL code in the core and added new .vhd files in the process, don't forget to declare them in the cores .pao file
ZedBoard_Linux_Design/hw/xps_proj/pcores/superip_v1_00_a/data/superip_v2_1_0.pao
The .pao file will determine in which order the libraries should be compiled.
This means you have to insert your new module before the library that instantiates it!


----------------------------
Getting access to repository
----------------------------

This short tutorial will cover how to sign up on github and clone a project directory via ssh.


Sign up here:
https://github.com

Write your account name to bottom of the General wiki page.
Wait for invitation email to the project.

Accept invitation, go to "SoCdesign/inputboard".
You should see a bunch of files.

Now open a terminal in your vm and execute:
$ mkdir sshkey
$ cd sshkey
$ ssh-keygen -t rsa -C "<your email address>"
mykey<Enter>

$ cat mykey.pub

Now go to https://github.com/settings/ssh
Press "Add SSH key"
copy the contents of mykey.pub to the empty field.
Add key.

Add key to your local ssh-agent
$ cd ..
$ ssh-add sshkey/mykey

Clone the repository on the command line
$ git clone git@github.com:SoCdesign/inputboard.git

$ cd inputboard
$ git config --global user.email <your email address>
$ git config --global user.name <your name>


Now you are finished. :)
Modify the code or start with the first build described above.

----------
Git basics
----------

print (not committed) differences to last commit on this branch (initally it's master)
$ git status

add file to next commit
$ git add <file>

commit changes/modified files to local branch
$ git commit -m "<commit message>"

push changes to github (central git repository)
$ git push

pull new changes from github (central git repository)
$ git pull


view all commits for the current branch
$ git log

view all branches
$ git branch -a


create new branch and change to it
$ git checkout -b <branch_name>
e.g.
$ git checkout -b filter

...<modify and commit sth.>...

push current local branch to remote branch (creating it if it doesn't exist)
$ git push origin <branch_name>
e.g.
$ git push origin filter

change to master branch first and then merge filter branch into master branch
$ git checkout master
$ git merge filter
...<do merging>...

delete filter branch locally and remotely
$ git branch -D filter
$ git push origin --delete filter

revert changes to last commit of branch
$ git checkout -f <branch_name>

compare which files were created modified between commits
$ git diff --name-status SHA1 SHA2

view repository configuration
$ cat .git/config

unstage (from staged files for next commit with "git add ..")
$ git reset HEAD <file>

revert last local commit
$ git reset --soft HEAD~1


-----------------
Serial connection
-----------------

connect USB to UART cable
run Tera Term on Windows to connect to ZedBoard serial console

Settings:

Port: COM20 (e.g.)
Baud rate: 115200
Data: 8-bit
Parity: none
Stop: 1-bit
Flow control: none
